name: CI/CD

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'docs/**'
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-python-package:
    if: false
    name: 🔨 Build python package
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: 🏗 Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('src/setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: 🏗 Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gettext
      - name: 🏗 Install Dependencies
        run: python -m pip install twine wheel -Ue "src[dev]"
      - name: 🏗 Set byro version
        run: sed -i 's/__version__.*/__version__ = "${{ github.ref_name }}"/' byro/__init__.py
        working-directory: ./src
      - name: 🔎 Check manifest
        run: check-manifest .
        working-directory: ./src
      - name: 🔨Build package
        run: |
          python -m build -nw
          python -m build -ns
        working-directory: ./src
      - name: 🔎 Check package
        run: twine check dist/*
        working-directory: ./src
      - name: ⬆ Upload build result
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: src/dist

  pypi-publish:
    if: false # if: github.event_name == 'release' && github.event.action == 'published'
    name: ⬆ Upload release to PyPI
    needs: build-python-package
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/byro
    permissions:
      id-token: write
    steps:
      - name: ⬇ Download build result
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - name: 📦 Publish to index
        uses: pypa/gh-action-pypi-publish@release/v1

  build-docker-image:
    name: 🔨 Build docker image
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout
        uses: actions/checkout@v4
      - name: 🏗 Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: 🏗 Setup Docker buildx
        uses: docker/setup-buildx-action@v3
      - name: 🏗 Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: 🏗 Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: src
          platforms: linux/amd64
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: 🔎 Inspect Docker image
        run: docker image inspect ${{ steps.meta.outputs.tags }}

  push-docker-image:
    name: 🔨Push Docker image to GitHub Packages
    needs: build-docker-image
    if: github.event_name == 'push' || (github.event_name == 'release' && github.event.action == 'published')
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: 🏗 Checkout
        uses: actions/checkout@v4
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: 🏗 Login to DockerHub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: 🏗 Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: 🏗 Build container image
        uses: docker/build-push-action@v5
        with:
          context: src
          platforms: linux/amd64,linux/arm64/v8,linux/arm/v7
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
